import { SvelteComponent, init, safe_not_equal, create_slot, update_slot, transition_in, transition_out } from 'svelte/internal';
import { createEventDispatcher, onMount, onDestroy } from 'svelte';

/* src/lib/InternetConnection.svelte generated by Svelte v3.24.1 */

const get_default_slot_changes = dirty => ({
	status: dirty & /*online*/ 1,
	online: dirty & /*online*/ 1,
	offline: dirty & /*online*/ 1
});

const get_default_slot_context = ctx => ({
	status: /*online*/ ctx[0] ? "online" : "offline",
	online: /*online*/ ctx[0],
	offline: !/*online*/ ctx[0]
});

function create_fragment(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], get_default_slot_context);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, online*/ 3) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let online;

	onMount(() => {
		$$invalidate(0, online = navigator.onLine);
		window.addEventListener("online", e => $$invalidate(0, online = true), false);
		window.addEventListener("offline", e => $$invalidate(0, online = false), false);
	});

	onDestroy(() => {
		if (typeof window !== "undefined") {
			window.removeEventListener("online", null);
			window.removeEventListener("offline", null);
		}
	});

	let { $$slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*online*/ 1) {
			 dispatch("change", {
				status: online ? "online" : "offline",
				online,
				offline: !online
			});
		}
	};

	return [online, $$scope, $$slots];
}

class InternetConnection extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default InternetConnection;
